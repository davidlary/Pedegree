# OpenBooks Project Dependencies
# Comprehensive textbook discovery, acquisition, and processing system
# Version: 0.4.0 - Multilingual Support

# Core dependencies
requests>=2.28.0          # HTTP requests for API calls and downloads
PyYAML>=6.0              # Configuration file parsing
pathlib                   # Built-in - Path manipulation (Python 3.4+)
hashlib                   # Built-in - Content hashing and caching
json                      # Built-in - Data serialization
logging                   # Built-in - Comprehensive logging system

# Enhanced logging and terminal UI
colorama>=0.4.6          # Cross-platform colored terminal output
rich>=13.7.0             # Rich text and beautiful formatting for terminal
streamlit>=1.28.0        # Web application framework for ReadOpenBooks.py
threading                # Built-in - Thread safety for logging and UI
queue                    # Built-in - Thread-safe communication

# Parallel processing and system monitoring
psutil>=5.9.0            # CPU, memory, disk monitoring and resource management
# concurrent.futures      # Built-in - Thread and process pools
# multiprocessing         # Built-in - Multi-core processing
# asyncio                 # Built-in - Asynchronous operations

# Git repository management
GitPython>=3.1.0         # Git repository operations and management
# git                     # System dependency - Git SCM (install via package manager)
# git-lfs                 # System dependency - Git Large File Storage

# Text extraction and content processing
PyMuPDF>=1.23.0          # PDF text extraction with mathematical notation support
PyPDF2>=3.0.1            # PDF manipulation and chunking for Claude API processing
ebooklib>=0.18           # EPUB file reading and processing
beautifulsoup4>=4.12.0   # HTML/XML parsing and text extraction
lxml>=4.9.0              # Fast XML processing backend for BeautifulSoup

# AI-powered PDF processing (optional - requires ANTHROPIC_API_KEY)
anthropic>=0.25.0        # Claude API for advanced PDF text extraction
# Note: Requires ANTHROPIC_API_KEY environment variable for PDF processing features

# Academic classification and language processing
# Built-in xml.etree.ElementTree for XML parsing
# Built-in re for regular expressions and text processing

# Search indexing and database
# sqlite3                 # Built-in - Search index database
# Built-in collections for data structures

# Data structures and utilities
dataclasses              # Built-in - Structured data classes (Python 3.7+)
typing                   # Built-in - Type hints and annotations
datetime                 # Built-in - Date and time handling
time                     # Built-in - Time utilities

# Development and testing dependencies
pytest>=7.4.0           # Modern unit testing framework
pytest-cov>=4.0.0       # Test coverage measurement and reporting
pytest-mock>=3.11.0     # Enhanced mocking capabilities for tests
coverage>=7.0.0         # Code coverage analysis

# Optional advanced features (uncomment if needed)
# spacy>=3.6.0           # Natural language processing and language detection
# scikit-learn>=1.3.0    # Machine learning for advanced content classification
# sentence-transformers>=2.2.0  # Semantic search and embeddings
# torch>=2.0.0           # PyTorch for deep learning features (GPU support)
# transformers>=4.30.0   # Hugging Face transformers for NLP

# ============================================================================
# INSTALLATION INSTRUCTIONS
# ============================================================================

# 1. System Dependencies (install via package manager):
#    macOS:     brew install git git-lfs
#    Ubuntu:    sudo apt install git git-lfs python3-dev
#    Windows:   Download Git from git-scm.com, enable Git LFS during installation
#
# 2. Python Environment Setup:
#    python -m venv venv
#    source venv/bin/activate  # On Windows: venv\Scripts\activate
#    pip install --upgrade pip setuptools wheel
#
# 3. Install Core Dependencies:
#    pip install -r requirements.txt
#
# 4. Optional Dependencies (for advanced features):
#    pip install spacy scikit-learn sentence-transformers torch
#    python -m spacy download en_core_web_sm  # For NLP features
#
# 5. Development Setup:
#    pip install -e .  # Editable installation for development
#    pytest tests/     # Run unit test suite
#
# 6. Configuration:
#    Copy config/default.yaml to config/local.yaml and customize as needed
#    Set OPENBOOKS_CONFIG environment variable if using custom config location

# ============================================================================
# SYSTEM REQUIREMENTS AND PERFORMANCE NOTES
# ============================================================================

# Minimum Requirements:
# - Python 3.8+
# - 4 GB RAM (8 GB recommended)
# - 10 GB free disk space for textbook collection
# - Git 2.30+ with Git LFS support
# - Internet connection for repository discovery and OpenAlex API

# Recommended Configuration:
# - Python 3.11+
# - 16 GB RAM for large collections (1000+ textbooks)
# - SSD storage for optimal search performance
# - Multi-core CPU (system auto-detects and uses available cores)
# - Stable internet connection for parallel downloads

# Performance Scaling:
# - Parallel processing automatically scales to available CPU cores
# - Memory usage scales with collection size (~50 MB per 100 textbooks)
# - Search index size approximately 10% of total textbook content
# - Processing speed: ~10-50 textbooks per minute depending on source format

# Language Support:
# - Full support: English, Spanish, French, Polish, German
# - Detection accuracy: >95% for known OpenStax repositories
# - Fallback: English for undetected languages
# - Directory structure: Books/{language}/{discipline}/{level}/

# API Dependencies:
# - OpenAlex API: Free, no authentication required (rate limited)
# - GitHub API: Higher rate limits with authentication token (optional)
# - Anthropic Claude API: Required for PDF text extraction (set ANTHROPIC_API_KEY)
# - No other external APIs required for core functionality